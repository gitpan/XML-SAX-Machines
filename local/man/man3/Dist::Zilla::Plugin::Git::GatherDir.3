.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::Git::GatherDir 3"
.TH Dist::Zilla::Plugin::Git::GatherDir 3 "2013-08-18" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::Git::GatherDir \- gather all tracked files in a Git working directory
.SH "VERSION"
.IX Header "VERSION"
version 2.014
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a trivial variant of the GatherDir
plugin.  It looks in the directory named in the \*(L"root\*(R" attribute and adds all
the Git tracked files it finds there (as determined by \f(CW\*(C`git ls\-files\*(C'\fR).  If the
root begins with a tilde, the tilde is replaced with the current user's home
directory according to File::HomeDir.
.PP
Most users just need:
.PP
.Vb 1
\&  [Git::GatherDir]
.Ve
.PP
\&...and this will pick up all tracked files from the current directory into the
dist.  You can use it multiple times, as you can any other plugin, by providing
a plugin name.  For example, if you want to include external specification
files into a subdir of your dist, you might write:
.PP
.Vb 2
\&  [Git::GatherDir]
\&  ; this plugin needs no config and gathers most of your files
\&
\&  [Git::GatherDir / SpecFiles]
\&  ; this plugin gets all tracked files in the root dir and adds them under ./spec
\&  root   = ~/projects/my\-project/spec
\&  prefix = spec
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "root"
.IX Subsection "root"
This is the directory in which to look for files.  If not given, it defaults to
the dist root \*(-- generally, the place where your \fIdist.ini\fR or other
configuration file is located.
.SS "prefix"
.IX Subsection "prefix"
This parameter can be set to gather all the files found under a common
directory.  See the description above for an example.
.SS "include_dotfiles"
.IX Subsection "include_dotfiles"
By default, files will not be included if they begin with a dot.  This goes
both for files and for directories relative to the \f(CW\*(C`root\*(C'\fR.
.PP
In almost all cases, the default value (false) is correct.
.SS "include_untracked"
.IX Subsection "include_untracked"
By default, files not tracked by Git will not be gathered.  If this is
set to a true value, then untracked files not covered by a Git ignore
pattern (i.e. those reported by \f(CW\*(C`git ls\-files \-o \-\-exclude\-standard\*(C'\fR)
are also gathered (and you'll probably want to use
Git::Check to ensure all files are
checked in before a release).
.PP
\&\f(CW\*(C`include_untracked\*(C'\fR requires at least Git 1.5.4, but you should
probably not use it if your Git is older than 1.6.5.2.  Versions
before that would not list files matched by your \fI.gitignore\fR, even
if they were already being tracked by Git (which means they will not
be gathered, even though they should be).  Whether that is a problem
depends on the contents of your exclude files (including the global
one, if any).
.SS "follow_symlinks"
.IX Subsection "follow_symlinks"
Git::GatherDir does not honor GatherDir's
follow_symlinks
option.  While the attribute exists (because Git::GatherDir is a
subclass), setting it has no effect.
.PP
Directories that are symlinks will not be gathered.  Instead, you'll
get a message saying \f(CW\*(C`WARNING: %s is symlink to directory, skipping it\*(C'\fR.
To suppress the warning, add that directory to \f(CW\*(C`exclude_filename\*(C'\fR or
\&\f(CW\*(C`exclude_match\*(C'\fR.  To gather the files in the symlinked directory, use
a second instance of GatherDir or Git::GatherDir with appropriate
\&\f(CW\*(C`root\*(C'\fR and \f(CW\*(C`prefix\*(C'\fR options.
.PP
Files which are symlinks are always gathered.
.SS "exclude_filename"
.IX Subsection "exclude_filename"
To exclude certain files from being gathered, use the \f(CW\*(C`exclude_filename\*(C'\fR
option. This may be used multiple times to specify multiple files to exclude.
.SS "exclude_match"
.IX Subsection "exclude_match"
This is just like \f(CW\*(C`exclude_filename\*(C'\fR but provides a regular expression
pattern.  Files matching the pattern are not gathered.  This may be used
multiple times to specify multiple patterns to exclude.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerome Quelin
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2009 by Jerome Quelin.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
