.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::Test::Compile 3"
.TH Dist::Zilla::Plugin::Test::Compile 3 "2013-08-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::Test::Compile \- common tests to check syntax of your modules
.SH "VERSION"
.IX Header "VERSION"
version 2.018
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your dist.ini:
.PP
.Vb 6
\&    [Test::Compile]
\&    skip      = Test$
\&    fake_home = 1
\&    needs_display = 1
\&    fail_on_warning = author
\&    bail_out_on_fail = 1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a plugin that runs at the gather files stage,
providing the following files:
.IP "\(bu" 4
\&\fIt/00\-compile.t\fR \- a standard test to check syntax of bundled modules
.Sp
This test will find all modules and scripts in your dist, and try to
compile them one by one. This means it's a bit slower than loading them
all at once, but it will catch more errors.
.Sp
We currently only check \fIbin/\fR, \fIscript/\fR and \fIscripts/\fR for scripts.
.PP
This plugin accepts the following options:
.IP "\(bu" 4
skip: a regex to skip compile test for modules matching it. The
match is done against the module name (\f(CW\*(C`Foo::Bar\*(C'\fR), not the file path
(\fIlib/Foo/Bar.pm\fR).  This option can be repeated to specify multiple regexes.
.IP "\(bu" 4
fake_home: a boolean to indicate whether to fake \f(CW$ENV{HOME}\fR.
This may be needed if your module unilateraly creates stuff in homedir:
indeed, some cpantesters will smoke test your dist with a read-only home
directory. Default to false.
.IP "\(bu" 4
needs_display: a boolean to indicate whether to skip the compile test
on non\-Win32 systems when \f(CW$ENV{DISPLAY}\fR is not set. Defaults to false.
.IP "\(bu" 4
fail_on_warning: a string to indicate when to add a test for
warnings during compilation checks. Possible values are:
.RS 4
.IP "\(bu" 4
none: do not check for warnings
.IP "\(bu" 4
author: check for warnings only when \s-1AUTHOR_TESTING\s0 is set
(default, and recommended)
.IP "\(bu" 4
all: always test for warnings (not recommended, as this can prevent
installation of modules when upstream dependencies exhibit warnings in a new
Perl release)
.IP "\(bu" 4
module_finder
.Sp
This is the name of a FileFinder for finding
modules to check.  The default value is \f(CW\*(C`:InstallModules\*(C'\fR; this option can be
used more than once.  .pod files are always omitted.
.Sp
Other pre-defined finders are listed in
FileFinder.
You can define your own with the
Dist::Zilla::Plugin::FileFinder::ByName plugin.
.IP "\(bu" 4
script_finder
.Sp
Just like \f(CW\*(C`module_finder\*(C'\fR, but for finding scripts.  The default value is
\&\f(CW\*(C`:ExecFiles\*(C'\fR (you can use the Dist::Zilla::Plugin::ExecDir plugin to mark
those files as executables).
.RE
.RS 4
.RE
.IP "\(bu" 4
bail_out_on_fail: a boolean to indicate whether the test will \s-1BAIL_OUT\s0
of all subsequent tests when compilation failures are encountered. Defaults to false.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::NeedsDisplay
.PP
You can also look for information on this module at:
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Dist\-Zilla\-Plugin\-Test\-Compile <http://annocpan.org/dist/Dist-Zilla-Plugin-Test-Compile>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Dist\-Zilla\-Plugin\-Test\-Compile <http://cpanratings.perl.org/d/Dist-Zilla-Plugin-Test-Compile>
.IP "\(bu" 4
Open bugs
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dist\-Zilla\-Plugin\-Test\-Compile <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dist-Zilla-Plugin-Test-Compile>
.IP "\(bu" 4
Git repository
.Sp
http://github.com/jquelin/dist\-zilla\-plugin\-test\-compile.git <http://github.com/jquelin/dist-zilla-plugin-test-compile.git>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerome Quelin
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2009 by Jerome Quelin.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Ahmad M. Zawawi <azawawi@ubuntu.(none)>
.IP "\(bu" 4
Chris Weyl <cweyl@alumni.drew.edu>
.IP "\(bu" 4
Harley Pig <harleypig@gmail.com>
.IP "\(bu" 4
Jerome Quelin <jquelin@gmail.com>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Kent Fredric <kentfredric@gmail.com>
.IP "\(bu" 4
Marcel Gruenauer <hanekomu@gmail.com>
.IP "\(bu" 4
Olivier MenguX <dolmen@cpan.org>
.IP "\(bu" 4
Peter Shangov <pshangov@yahoo.com>
.IP "\(bu" 4
Randy Stauner <randy@magnificent\-tears.com>
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.IP "\(bu" 4
fayland <fayland@gmail.com>
