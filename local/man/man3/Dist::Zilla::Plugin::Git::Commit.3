.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::Git::Commit 3"
.TH Dist::Zilla::Plugin::Git::Commit 3 "2013-08-18" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::Git::Commit \- commit dirty files
.SH "VERSION"
.IX Header "VERSION"
version 2.014
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your \fIdist.ini\fR:
.PP
.Vb 2
\&    [Git::Commit]
\&    changelog = Changes      ; this is the default
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Once the release is done, this plugin will record this fact in git by
committing changelog and \fIdist.ini\fR. The commit message will be taken
from the changelog for this release.  It will include lines between
the current version and timestamp and the next non-indented line,
except that blank lines at the beginning or end are removed.
.PP
\&\fBWarning:\fR If you are using Git::Commit in conjunction with the
NextRelease plugin,
\&\f(CW\*(C`[NextRelease]\*(C'\fR must come before \f(CW\*(C`[Git::Commit]\*(C'\fR (or \f(CW\*(C`[@Git]\*(C'\fR) in
your \fIdist.ini\fR or plugin bundle.  Otherwise, Git::Commit will commit
the \fIChanges\fR file before NextRelease has updated it.
.PP
The plugin accepts the following options:
.IP "\(bu" 4
changelog \- the name of your changelog file. Defaults to \fIChanges\fR.
.IP "\(bu" 4
allow_dirty \- a file that will be checked in if it is locally
modified.  This option may appear multiple times.  The default
list is \fIdist.ini\fR and the changelog file given by \f(CW\*(C`changelog\*(C'\fR.
.IP "\(bu" 4
allow_dirty_match \- works the same as allow_dirty, but
matching as a regular expression instead of an exact filename.
.IP "\(bu" 4
add_files_in \- a path that will have its new files checked in.
This option may appear multiple times. This is used to add files
generated during build-time to the repository, for example. The default
list is empty.
.Sp
Note: The files have to be generated between those phases: BeforeRelease
<\-> AfterRelease, and after Git::Check + before Git::Commit.
.IP "\(bu" 4
commit_msg \- the commit message to use. Defaults to
\&\f(CW\*(C`v%v%n%n%c\*(C'\fR, meaning the version number and the list of changes.
.IP "\(bu" 4
time_zone \- the time zone to use with \f(CW%d\fR.  Can be any
time zone name accepted by DateTime.  Defaults to \f(CW\*(C`local\*(C'\fR.
.PP
You can use the following codes in commit_msg:
.ie n .IP "%c" 4
.el .IP "\f(CW%c\fR" 4
.IX Item "%c"
The list of changes in the just-released version (read from \f(CW\*(C`changelog\*(C'\fR).
It will include lines between the current version and timestamp and
the next non-indented line, except that blank lines at the beginning
or end are removed.  It normally ends in a newline.
.ie n .IP """%{dd\-MMM\-yyyy}d""" 4
.el .IP "\f(CW%{dd\-MMM\-yyyy}d\fR" 4
.IX Item "%{dd-MMM-yyyy}d"
The current date.  You can use any \s-1CLDR\s0 format supported by
DateTime.  A bare \f(CW%d\fR means \f(CW\*(C`%{dd\-MMM\-yyyy}d\*(C'\fR.
.ie n .IP "%n" 4
.el .IP "\f(CW%n\fR" 4
.IX Item "%n"
a newline
.ie n .IP "%N" 4
.el .IP "\f(CW%N\fR" 4
.IX Item "%N"
the distribution name
.ie n .IP """%{\-TRIAL}t""" 4
.el .IP "\f(CW%{\-TRIAL}t\fR" 4
.IX Item "%{-TRIAL}t"
Expands to \-TRIAL (or any other supplied string) if this is a trial
release, or the empty string if not.  A bare \f(CW%t\fR means \f(CW\*(C`%{\-TRIAL}t\*(C'\fR.
.ie n .IP "%v" 4
.el .IP "\f(CW%v\fR" 4
.IX Item "%v"
the distribution version
.SH "METHODS"
.IX Header "METHODS"
.SS "get_commit_message"
.IX Subsection "get_commit_message"
This method returns the commit message.  The default implementation
reads the Changes file to get the list of changes in the just-released version.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerome Quelin
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2009 by Jerome Quelin.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
